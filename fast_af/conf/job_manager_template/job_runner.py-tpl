from datetime import datetime, timedelta
from fastapi import UploadFile
from redis import Redis
from {{ project_name}}.job_manager.email.mailer import send_mail
from {{ project_name}}.root.logging import get_logger
from {{ project_name}}.root.settings import Settings

from arq.jobs import Job, JobDef, JobStatus
from arq.constants import default_queue_name
from arq import create_pool
from arq.connections import RedisSettings


settings = Settings()

redis_settings = RedisSettings(host=settings.REDIS_HOST, port=settings.REDIS_PORT)


redis_pool = None


async def create_redis_pool():
    global redis_pool
    redis_pool = await create_pool(redis_settings)
    return redis_pool


async def background_mailer(
    reciepients: list[str],
    subject: str,
    payload: dict,
    template: str,
    attachments: list[UploadFile] = [],
):
    job = await schedule_job(
        date=datetime.now(),
        function_name="send_mail",
        subject=subject,
        reciepients=reciepients,
        payload=payload,
        template=template,
        attachments=attachments,
    )


async def schedule_job(
    date: datetime,
    function_name: str,
    queue_name: str | None = None,
    job_id=None,
    *args,
    **kwargs,
):

    pool = await create_redis_pool()

    job = await pool.enqueue_job(
        function_name,
        *args,
        _job_id=job_id,
        _queue_name=queue_name,
        **kwargs,
    )

    if job is None:
        return None

    return job


async def get_job_status(job_id: str, queue_name: str = default_queue_name):
    pool = await create_redis_pool()

    job = Job(job_id=job_id, redis=pool, _queue_name=queue_name)
    status = await job.status()

    logger = get_logger(__name__)
    logger.info(f"Job {job_id} status: {status}")

    return status


async def does_job_exists(job_id: str, queue_name: str = default_queue_name):

    status = await get_job_status(job_id=job_id, queue_name=queue_name)

    return status != JobStatus.not_found


async def is_job_queued(job_id: str, queue_name: str = default_queue_name):

    status = await get_job_status(job_id=job_id, queue_name=queue_name)

    return status == JobStatus.queued
