import requests
import aiohttp


from {{ project_name}}.root.settings import Settings
from {{ project_name}}.services.utils.exceptions import ServiceException

from {{ project_name}}.schemas.auth_schemas import GoogleSSOUserBase


settings = Settings()

GOOGLE_CLIENT_ID = settings.GOOGLE_CLIENT_ID
GOOGLE_CLIENT_SECRET = settings.GOOGLE_CLIENT_SECRET
GOOGLE_REDIRECT_URI = settings.GOOGLE_REDIRECT_URI


def get_redirect_utl() -> str:
    return f"https://accounts.google.com/o/oauth2/auth?response_type=code&client_id={GOOGLE_CLIENT_ID}&redirect_uri={GOOGLE_REDIRECT_URI}&scope=openid%20profile%20email&access_type=offline"


async def _get_google_user_info(access_token: str) -> dict:

    session = aiohttp.ClientSession()

    url = "https://www.googleapis.com/oauth2/v1/userinfo"
    headers = {"Authorization": f"Bearer {access_token}"}

    async with session.get(url=url, headers=headers) as response:
        if not str(response.status).startswith("2"):
            response_text = await response.text()

            await session.close()
            raise ServiceException(f"Failed to get user info: {response.status} {response_text}")

        json_response = await response.json()
        await session.close()
        return json_response


async def _get_access_token(code: str) -> str:
    token_url = "https://accounts.google.com/o/oauth2/token"
    data = {
        "code": code,
        "client_id": GOOGLE_CLIENT_ID,
        "client_secret": GOOGLE_CLIENT_SECRET,
        "redirect_uri": GOOGLE_REDIRECT_URI,
        "grant_type": "authorization_code",
    }

    session = aiohttp.ClientSession()

    async with session.post(
        token_url,
        json=data,
    ) as response:
        if not str(response.status).startswith("2"):
            response_text = await response.text()

            await session.close()
            raise ServiceException(f"Failed to get access token: {response.status} {response_text}")

        json_response = await response.json()

        print(f"get access token response {json_response}")

        await session.close()

        access_token = json_response.get("access_token", None)

        if not access_token:
            raise ServiceException(f"Failed to get access token: {response.status} {response_text}")

        return access_token


async def get_google_user_info(code: str) -> dict:

    # Get the access token
    access_token = await _get_access_token(code=code)

    # Get the user info
    user_info = await _get_google_user_info(access_token=access_token)

    name = user_info.get("name", None)

    if name is None:
        first_name = user_info.get("given_name", "")
        last_name = user_info.get("family_name", "")


        name = f"{first_name} {last_name}"

    data = {
        "email": user_info["email"],
        "full_name": name,
        "profile_image": user_info.get("picture", None),
    }

    return data
