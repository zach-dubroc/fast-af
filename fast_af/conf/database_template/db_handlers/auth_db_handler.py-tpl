import logging
from sqlalchemy import insert, select, delete, update
from sqlalchemy.exc import IntegrityError

from {{ project_name}}.schemas.auth_schemas import GoogleSSOUser, GoogleSSOUserCreate, UserCreate, UserEdit, UserExtended, User

from {{ project_name}}.root.database import async_session
from {{ project_name}}.database.orms.auth_orm import User as UserDB, GoogleSignInUser as GoogleSignInUserDB
from {{ project_name}}.services.utils.exceptions import NotFoundException, RecordExistsException, ServiceException


LOGGER = logging.getLogger(__name__)


async def create_user(user: UserCreate):
    async with async_session() as session:

        data = user.model_dump()

        stmt = insert(UserDB).values(**data).returning(UserDB)

        try:
            result = (await session.execute(statement=stmt)).scalar_one_or_none()

        except IntegrityError as e:
            print(e)
            LOGGER.error(f"Duplicate record found for user {user.email}")
            await session.rollback()
            raise RecordExistsException(message=f"Duplicate record found for {user.email}")
        except Exception as e:
            LOGGER.exception(e)
            LOGGER.error(f"An unknown error occurred")
            await session.rollback()
            raise ServiceException(message=f"An unknown error occurred")

        if result is None:
            LOGGER.error(f"Couldnt create account found for user with email {user.email}")
            await session.rollback()
            raise ServiceException(message=f"Couldnt create record for {user.email}")

        await session.commit()

        return User.model_validate(result)


async def update_user(
    user_edit_data: UserEdit,
    user_email: str = None,
    user_id: str = None,
):

    async with async_session() as session:
        if not user_id and not user_email:
            raise Exception("user_id and user_email not given")

        if user_id is not None:
            stmt = (
                update(UserDB)
                .values(user_edit_data.model_dump(exclude_none=True, exclude_unset=True))
                .where(UserDB.user_id == user_id)
                .returning(UserDB)
            )
        else:
            stmt = (
                update(UserDB)
                .values(user_edit_data.model_dump(exclude_none=True, exclude_unset=True))
                .where(UserDB.email == user_email)
                .returning(UserDB)
            )

        result = (await session.execute(statement=stmt)).scalar_one_or_none()

        if result is None:
            raise ServiceException(message="User details couldbt be updated")

        await session.commit()

        return User.model_validate(result)


async def get_user_with_email(email: str):
    async with async_session() as session:

        stmt = select(UserDB).where(UserDB.email == email)

        result = (await session.execute(statement=stmt)).scalar_one_or_none()

        if result is None:
            raise NotFoundException(message=f"Couldnt find user with email {email}")

        return UserExtended.model_validate(result)


async def get_user_with_user_id(user_id: str):
    async with async_session() as session:

        stmt = select(UserDB).where(UserDB.user_id == user_id)

        result = (await session.execute(statement=stmt)).scalar_one_or_none()

        if result is None:
            raise NotFoundException(message=f"Couldnt find user with user_id {user_id}")

        return UserExtended.model_validate(result)


async def delete_user_with_user_id(user_id: str) -> bool:
    async with async_session() as session:

        stmt = delete(UserDB).where(UserDB.user_id == user_id)

        result = await session.execute(statement=stmt)

        await session.commit()

        return True


# Google SSO
async def get_google_user_with_email(email: str):
    async with async_session() as session:

        stmt = select(GoogleSignInUserDB).where(GoogleSignInUserDB.email == email)

        result = (await session.execute(statement=stmt)).scalar_one_or_none()

        if result is None:
            raise NotFoundException(message=f"Couldnt find google user with email {email}")

        return GoogleSSOUser.model_validate(result)


async def create_google_user(google_user: GoogleSSOUserCreate):
    async with async_session() as session:

        data = google_user.model_dump()

        stmt = insert(GoogleSignInUserDB).values(**data).returning(GoogleSignInUserDB)

        try:
            result = (await session.execute(statement=stmt)).scalar_one_or_none()

        except IntegrityError as e:
            LOGGER.error(f"Duplicate record found for google user {google_user.email}")
            await session.rollback()
            raise RecordExistsException(message=f"Duplicate record found for {google_user.email}")
        except Exception as e:
            LOGGER.exception(e)
            LOGGER.error(f"An unknown error occurred")
            await session.rollback()
            raise ServiceException(message=f"An unknown error occurred")

        if result is None:
            LOGGER.error(f"Couldnt create account found for google user with email {google_user.email}")
            await session.rollback()
            raise ServiceException(message=f"Couldnt create record for {google_user.email}")

        await session.commit()

        return GoogleSSOUser.model_validate(result)
